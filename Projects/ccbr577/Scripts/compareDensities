#! /usr/bin/Rscript
# compareDensities
# Scan HITseq results for density peaks
# Randy Johnson
# CCR Collaborative Bioinformatics Resource at Frederick National Laboratory
# Leidos Biomedical Research, Inc


library(Rtools)


# parse arguments
vars <- commandArgs(TRUE)

tmp <- strsplit(vars, '=')

vars <- as.list(sapply(tmp, `[`, 2))
names(vars) <- sapply(tmp, `[`, 1)

### For testing ###
if(FALSE)
{
    vars$i1 <- '../Results/Hughes_TAF3_WT_q20ct2.RData'
    vars$i2 <- '../Results/Hughes_TAF3mutM880A_q20ct2.RData'
    vars$bed1 <- '../Results/Hughes_TAF3_WT_q20ct2_peaks.bed'
    vars$bed2 <- '../Results/Hughes_TAF3mutM880A_q20ct2_peaks.bed'
    vars$o <- '../Results/taf3_results.txt'
    vars$savePerms <- TRUE
}


##### defaults #####

# input file
if(is.null(vars$i1) | is.null(vars$i2))
    stop("Input files (i1 and i2) required")
if(!file.exists(vars$i1))
    stop(paste("Input file,", vars$i1, "not found."))
if(!file.exists(vars$i2))
    stop(paste("Input file,", vars$i2, "not found."))

# output file
if(is.null(vars$o))
    stop("Output file (o) required")

# number of permutations
if(is.null(vars$nperm))
    vars$nperm <- 1000

# seed for permutations
if(is.null(vars$seed))
    vars$seed <- 289473

# shall we save permutations?
if(is.null(vars$savePerms))
    vars$savePerms <- FALSE


##### Read in data #####

# i1
load(vars$i1)
A1 <- A
Z1 <- Z

# i2
load(vars$i2)
A2 <- A
Z2 <- Z

rm(A, Z)

# bed1
bed1 <- read.table(vars$bed1, skip = 1, header = FALSE, stringsAsFactor = FALSE)
names(bed1) <- c('chr', 'start', 'end', 'genes', 'V5', 'strand', 'thickStart', 'thickEnd')

bed1$len <- with(bed1, end - start)

# bed2
bed2 <- read.table(vars$bed2, skip = 1, header = FALSE, stringsAsFactor = FALSE)
names(bed2) <- c('chr', 'start', 'end', 'genes', 'V5', 'strand', 'thickStart', 'thickEnd')

bed2$len <- with(bed2, end - start)

##### Merge A1 with A2 #####

gos2add <- dimnames(A2)[[1]][which(!(dimnames(A2)[[1]] %in% dimnames(A1)[[1]]))]
genes2add <- dimnames(A2)[[2]][which(!(dimnames(A2)[[2]] %in% dimnames(A1)[[2]]))]

gosShared <- dimnames(A2)[[1]][which(dimnames(A2)[[1]] %in% dimnames(A1)[[1]])]
genesShared <- dimnames(A2)[[2]][which(dimnames(A2)[[2]] %in% dimnames(A1)[[2]])]

A <- A1
A <- cbind(A, matrix(0, nrow = dim(A)[1], ncol = length(genes2add), dimnames = list(dimnames(A)[[1]], genes2add)))
A <- rbind(A, matrix(0, nrow = length(gos2add), ncol = dim(A)[2], dimnames = list(gos2add, dimnames(A)[[2]])))
A[gos2add, genes2add] <- A2[gos2add, genes2add]


##### Merge bed1 with bed2 #####

## peaks <- merge(bed1, bed2, by.x = 'genes', by.y = 'genes', all = TRUE)


##### Update Z #####

tmp <- matrix(0, nrow = dim(A)[2], ncol = 1, dimnames = list(dimnames(A)[[2]], 'dens'))
tmp[dimnames(Z1)[[1]],] <- Z1
Z1 <- tmp

tmp <- matrix(0, nrow = dim(A)[2], ncol = 1, dimnames = list(dimnames(A)[[2]], 'dens'))
tmp[dimnames(Z2)[[1]],] <- Z2
Z2 <- tmp


##### Analysis #####

# average density over each gene set
X <- A %*% Z1 / apply(A, 1, sum) - A %*% Z2 / apply(A, 1, sum)

# permuations
perms <- matrix(NA, nrow = dim(X)[1], ncol = vars$nperm, dimnames = list(dimnames(X)[[1]], 1:vars$nperm))

set.seed(vars$seed)
for(i in 1:vars$nperm)
{
    tmp1 <- sample(Z1)
    tmp2 <- sample(Z2)

    perms[,i] <- A %*% tmp1 / apply(A, 1, sum) - A %*% tmp2 / apply(A, 1, sum)
}

# order results for each GO -- keep same formatting
perms <- t(apply(perms, 1, function(x) x[order(x)]))

if(vars$savePerms)
    save(perms, file = 'perms.RData')

# find percentiles for observed differences
p <- X[,1]
p[] <- NA

for(g in names(p))
{
    p[g] <- percentile(X[g,1], perms[g,])
}

# turn into p-values
p[p > 0.5] <- 1 - p[p > 0.5]
p <- p*2  # (two-tailed)

p[p == 0] <- 1/(vars$nperm + 1)

# write output to file
write.table(p, file = vars$o, quote = FALSE, col.names = FALSE)
