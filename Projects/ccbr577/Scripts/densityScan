#! /usr/bin/Rscript
# densityScan
# Scan HITseq results for density peaks
# Randy Johnson
# CCR Collaborative Bioinformatics Resource at Frederick National Laboratory
# Leidos Biomedical Research, Inc


library(doBy)
library(MASS)


# parse arguments
vars <- commandArgs(TRUE)

tmp <- strsplit(vars, '=')

vars <- as.list(sapply(tmp, `[`, 2))
names(vars) <- sapply(tmp, `[`, 1)

### For testing ###
if(FALSE)
{
    vars$i <- '../Data/Hughes_TAF3_WT_q20ct2.bed'
    vars$build <- '../Builds/mm9G37_genes.bed'
    vars$translate <- '../Builds/mm9G37_genes.txt'
}


##### defaults #####

# input file
if(is.null(vars$i))
    stop("Input file (i) required")
if(!file.exists(vars$i))
    stop(paste("Input file,", vars$i, "not found."))

# output file
if(is.null(vars$o))
    vars$o <- gsub('Data', 'Results', gsub('.bed', '_peaks.bed', vars$i))

# track name
if(is.null(vars$n))
{
    vars$n <- strsplit(vars$i, '/')[[1]]
    vars$n <- strsplit(vars$n[[length(vars$n)]], '.', fixed = TRUE)[[1]][1]
}

# organism
if(is.null(vars$org))
    vars$org <- 'mouse'

# build
if(is.null(vars$build))
{
    warning('Build not specified. Gene names will not be available.')
}else{
    if(!file.exists(vars$build))
    {
        warning(paste("Build file,", vars$build, "not found. Gene names will not be available."))
        vars$build <- NULL
    }
}

# sex chromosomes
Xchrom <- c(mouse = 20, human = 23)
Ychrom <- c(mouse = 21, human = 24)

if(is.null(vars$X))
    vars$X <- Xchrom[vars$org]

if(is.null(vars$Y))
    vars$Y <- Ychrom[vars$org]

# peak must reach this threshold in order to be counted
if(is.null(vars$peakThresh))
    vars$peakThresh <- 0.2

# where we cutoff the edge of the peak
if(is.null(vars$peakBoundary))
    vars$peakBoundary <- 0.15


##### Data #####

# read in
dat <- read.table(vars$i, sep = '\t', skip = 1, comment.char = '', stringsAsFactors = FALSE)
names(dat) <- c('chrChar', 'start', 'end', 'info', 'zero', 'strand', 'start2', 'end2', 'color')

# pull chromosome numbers and sort properly
tmp <- gsub('chr', '', dat$chrChar)
dat$chr <- as.numeric(ifelse(tmp == 'X', vars$X,
                      ifelse(tmp == 'Y', vars$Y, tmp)))

dat <- dat[order(dat$chr, dat$start),]

# calculate genomic position
maxPos <- summaryBy(end ~ chr, data = dat, FUN = max)
maxPos$end.max <- maxPos$end.max + 2e6 # put at least 2 Mb between chromosomes

maxPos <- merge(maxPos, data.frame(chr = 1:max(maxPos$chr)), all = TRUE)
maxPos$end.max[is.na(maxPos$end.max)] <- 0

maxPos$add <- cumsum(c(0,maxPos$end.max[-dim(maxPos)[1]]))

dat$pos <- dat$start + maxPos$add[dat$chr]

# read in gene information
genes <- read.table(vars$build, na.strings = '-', stringsAsFactors = FALSE)
names(genes)[1:4] <- c('chrChar', 'start', 'end', 'info')

# if these are characters -- assume anything that doesn't convert to numeric should be missing
if(class(genes$start) == 'character')
    genes$start <- as.numeric(genes$start)

if(class(genes$end) == 'character')
    genes$end <- as.numeric(genes$end)

# translation table
translate <- read.table(vars$translate, sep = '\t', stringsAsFactors = FALSE, header = TRUE,
                        na.strings = "")

##### Density #####

# calculate density - make sure we have a sample point at least as often as bw is wide
dens <- density(dat$pos, bw = 1e3, n = 2^ceiling(log(max(dat$pos) / 1e3, 2)))

# points within peaks
dens$peak <- with(dens, (y / max(y)) > vars$peakThresh)

# peak start
dens$thickStart <- c(FALSE, with(dens, peak[-1] & !peak[-length(peak)]))

# peak end
dens$thickEnd <- c(with(dens, peak[-length(peak)] & !peak[-1]), FALSE)

# grab peaks
peaks <- data.frame(midpoint = (dens$x[dens$thickStart] + dens$x[dens$thickEnd]) / 2,
                    start = NA,
                    end = NA,
                    name = NA,
                    thickStart = NA,
                    thickEnd = NA)

for(i in 1:dim(peaks)[1])
{
    # find boundaries of peak
    thickStart <- which(dens$thickStart)[i]
    start <- thickStart

    thickEnd <- which(dens$thickEnd)[i]
    end <- thickEnd

    maxy <- max(dens$y)

    # expand a little
    while(dens$y[start] / maxy > vars$peakBoundary)
        start <- start - 1

    while(dens$y[end] / maxy > vars$peakBoundary)
        end <- end + 1

    peaks$start[i] <- round(dens$x[start])
    peaks$thickStart[i] <- round(dens$x[thickStart])
    peaks$end[i] <- round(dens$x[end])
    peaks$thickEnd[i] <- round(dens$x[thickEnd])
}

# add chromosome
peaks$chr <- sapply(peaks$midpoint, function(m) sum(m > maxPos$add))
peaks$chrChar <- ifelse(peaks$chr == vars$X, 'chrX',
                 ifelse(peaks$chr == vars$Y, 'chrY',
                                             paste('chr', peaks$chr, sep = '')))

# translate positions
peaks$start <- peaks$start - maxPos$add[peaks$chr]
peaks$thickStart <- peaks$thickStart - maxPos$add[peaks$chr]
peaks$end <- peaks$end - maxPos$add[peaks$chr]
peaks$thickEnd <- peaks$thickEnd - maxPos$add[peaks$chr]

# add other info
for(i in 1:dim(peaks)[1])
{
    # get gene name (if there is one)
    peaks$ensembl[i] <- paste(unique(subset(genes, chrChar == peaks$chrChar[i] &
                                                   ((start >= peaks$start[i] & start <= peaks$end[i]) |
                                                    (end >= peaks$start[i] & end <= peaks$end[i]) |
                                                    (peaks$start[i] >= start & peaks$start[i] <= end)))$info),
                              collapse = ',')
    if(peaks$ensembl[i] != '' & !is.na(peaks$ensembl[i]))
        peaks$name[i] <- paste(unique(subset(translate, Ensembl %in% strsplit(peaks$ensembl[i], ',')[[1]])$MGI),
                               collapse = ',')
}
peaks$name <- ifelse(peaks$name == '', '-', peaks$name)

peaks$score <- 0
peaks$strand <- '+' ################################### We should fix this -- just calling them all + now


##### Export bed File #####

# peaks track
cat('track name=', vars$n, '_peaks\n', sep = '', file = vars$o)
write.table(subset(peaks, select = c('chrChar', 'start', 'end', 'name', 'score',
                                     'strand', 'thickStart', 'thickEnd')),
            file = vars$o, append = TRUE, quote = FALSE, sep = '\t', row.names = FALSE, col.names = FALSE)
