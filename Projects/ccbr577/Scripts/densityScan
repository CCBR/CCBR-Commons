#! /usr/bin/Rscript
# densityScan
# Scan HITseq results for density peaks
# Randy Johnson
# CCR Collaborative Bioinformatics Resource at Frederick National Laboratory
# Leidos Biomedical Research, Inc


library(doBy)
library(MASS)
library(magrittr)
library(VariantAnnotation)
library(TxDb.Mmusculus.UCSC.mm9.knownGene) # database for VariantAnnotation
library(mygene) # for conversion of gene IDs to gene symbols

# parse arguments
vars <- commandArgs(TRUE)

tmp <- strsplit(vars, '=')

vars <- as.list(sapply(tmp, `[`, 2))
names(vars) <- sapply(tmp, `[`, 1)

### For testing ###
if(FALSE)
{
    vars$i <- '../Data/Hughes_TAF3_WT_q20ct2.bed'
    vars$build <- '../Builds/mm9G37_genes.bed'
    vars$translate <- '../Builds/mm9G37_genes.txt'
}


##### defaults #####

# input file
if(is.null(vars$i))
    stop("Input file (i) required")
if(!file.exists(vars$i))
    stop(paste("Input file,", vars$i, "not found."))

# output bed file
if(is.null(vars$o))
    vars$o <- gsub('Data', 'Results', gsub('.bed', '_peaks.bed', vars$i))

# output RData file
if(is.null(vars$R))
    vars$R <- gsub('.bed', '.RData', gsub('Data', 'Results', vars$i))

# track name
if(is.null(vars$n))
{
    vars$n <- strsplit(vars$i, '/')[[1]]
    vars$n <- strsplit(vars$n[[length(vars$n)]], '.', fixed = TRUE)[[1]][1]
}

# organism
if(is.null(vars$org))
    vars$org <- 'mouse'

# build
if(is.null(vars$build))
{
    warning('Build not specified. Gene names will not be available.')
}else{
    if(!file.exists(vars$build))
    {
        warning(paste("Build file,", vars$build, "not found. Gene names will not be available."))
        vars$build <- NULL
    }
}

# sex chromosomes
Xchrom <- c(mouse = 20, human = 23)
Ychrom <- c(mouse = 21, human = 24)

if(is.null(vars$X))
    vars$X <- Xchrom[vars$org]

if(is.null(vars$Y))
    vars$Y <- Ychrom[vars$org]

# peak must reach this threshold in order to be counted
if(is.null(vars$peakThresh))
    vars$peakThresh <- 0.2

# where we cutoff the edge of the peak
if(is.null(vars$peakBoundary))
    vars$peakBoundary <- 0.15

# window size for kernel density smoother
if(is.null(vars$bw))
    vars$bw <- 200


##### Data #####

# read in bed file
dat <- read.table(vars$i, sep = '\t', skip = 1, comment.char = '', stringsAsFactors = FALSE)
names(dat) <- c('chrChar', 'start', 'end', 'info', 'zero', 'strand', 'start2', 'end2', 'color')

# pull chromosome numbers and sort properly
tmp <- gsub('chr', '', dat$chrChar)
dat$chr <- as.numeric(ifelse(tmp == 'X', vars$X,
                      ifelse(tmp == 'Y', vars$Y, tmp)))

dat <- dat[order(dat$chr, dat$start),]

# calculate genomic position
maxPos <- summaryBy(end ~ chr, data = dat, FUN = max)
maxPos$end.max <- maxPos$end.max + 2e6 # put at least 2 Mb between chromosomes

maxPos <- merge(maxPos, data.frame(chr = 1:max(maxPos$chr)), all = TRUE)
maxPos$end.max[is.na(maxPos$end.max)] <- 0

maxPos$add <- cumsum(c(0,maxPos$end.max[-dim(maxPos)[1]]))

dat$pos <- dat$start + maxPos$add[dat$chr]

# read in gene information
genes <- read.table(vars$build, na.strings = '-', stringsAsFactors = FALSE)
names(genes)[1:4] <- c('chrChar', 'start', 'end', 'info')

# if these are characters -- assume anything that doesn't convert to numeric should be missing
if(class(genes$start) == 'character')
    genes$start <- as.numeric(genes$start)

if(class(genes$end) == 'character')
    genes$end <- as.numeric(genes$end)

# translation table
translate <- read.table(vars$translate, sep = '\t', stringsAsFactors = FALSE, header = TRUE,
                        na.strings = "")
translate$geneID <- gsub('ENSMUSG', '', translate$Ensembl) %>%
                    as.numeric()

##### Density #####

# calculate density - make sure we have a sample point at least as often as bw is wide
dens <- density(dat$pos, bw = vars$bw, n = 2^ceiling(log(max(dat$pos) / vars$bw, 2)))

# points within peaks
dens$peak <- with(dens, y > 1e-10)

# peak start
dens$thickStart <- with(dens, c(peak[1], peak[-1] & !peak[-length(peak)]))

# peak end
dens$thickEnd <- with(dens, c(peak[-length(peak)] & !peak[-1], peak[length(peak)]))

# grab clusters
clusters <- data.frame(midpoint = (dens$x[dens$thickStart] + dens$x[dens$thickEnd]) / 2,
                    start = NA,
                    end = NA,
                    name = NA,
                    thickStart = NA,
                    thickEnd = NA,
                    nInsertions = NA,
                    chr = NA,
                    chrChar = NA)

for(i in 1:dim(clusters)[1])
{
    # find boundaries of cluster
    thickStart <- which(dens$thickStart)[i]
    thinStart <- thickStart

    thickEnd <- which(dens$thickEnd)[i]
    thinEnd <- thickEnd

    # add chromosome number
    clusters$chr[i] <- sum(clusters$midpoint[i] > maxPos$add)
    clusters$chrChar[i] <- ifelse(clusters$chr[i] == vars$X, 'chrX',
                           ifelse(clusters$chr[i] == vars$Y, 'chrY',
                                                              paste('chr', clusters$chr[i], sep = '')))

    # check where the insertions are actually found
    tmp <- subset(dat, chrChar == clusters$chrChar[i] &
                       start >= dens$x[thinStart] - maxPos$add[clusters$chr[i]] &
                       start <= dens$x[thinEnd]  - maxPos$add[clusters$chr[i]])

    # how many insertions do we have in this cluster?
    if(dim(tmp)[1] == 0)
        stop("There are no insertions in this cluster...something is wrong.")

    clusters$nInsertions[i] <- dim(tmp)[1]

    # calculate cluster boundaries (in corrected bp position)
    clusters$start[i] <- round(dens$x[thinStart]) - maxPos$add[clusters$chr[i]]
    clusters$thickStart[i] <- min(tmp$start)
    clusters$thickEnd[i] <- max(tmp$start) + 1
    clusters$end[i] <- max(c(tmp$end, round(dens$x[thinEnd]) - maxPos$add[clusters$chr[i]]))
}

# get annotation information
annotation <- IRanges(clusters$thickStart, clusters$thickEnd) %>%
              GRanges(seqnames = clusters$chrChar) %>%
              locateVariants(subject = TxDb.Mmusculus.UCSC.mm9.knownGene, region = AllVariants())

geneInfo <- queryMany(qterms = na.omit(unique(annotation$GENEID)), scopes = 'entrezgene', species = 'mouse')
geneSymbols <- geneInfo$symbol
names(geneSymbols) <- geneInfo$entrezgene

# add other info
for(i in 1:dim(clusters)[1])
{
    entries <- as.vector(annotation@seqnames == clusters$chrChar[i] &
                         annotation@ranges == IRanges(clusters$thickStart[i], clusters$thickEnd[i]))

    clusters$location[i] <- annotation$LOCATION[entries] %>%
                         unique() %>%
                         paste(collapse = ', ')

    tmp <- annotation$GENEID[entries] %>%
           unique() %>%
           na.omit()

    if(length(tmp) > 0)
    {
        clusters$name[i] <- geneSymbols[tmp] %>%
                         paste(collapse = ',')
    }else{
        clusters$name[i] <- ''
    }
}

clusters$score <- log10(clusters$nInsertions / dim(dat)[1])
clusters$strand <- '+' ################################### We should fix this -- just calling them all + now


##### Export bed File #####

# clusters track
cat('track name=', vars$n, '_clusters\n', sep = '', file = vars$o)
write.table(subset(clusters, select = c('chrChar', 'start', 'end', 'name', 'score',
                                     'strand', 'thickStart', 'thickEnd')),
            file = vars$o, append = TRUE, quote = FALSE, sep = '\t', row.names = FALSE, col.names = FALSE)

# and full information
save(clusters, file = vars$R)
